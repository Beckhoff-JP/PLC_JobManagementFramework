<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{0711fc19-ddf5-4c28-b96d-7cde88b1723f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	_state :UINT;
	fbTask1 : FB_ControllerType_1;
	fbTask2 : FB_ControllerType_1;
	fbTask3 : FB_ControllerType_2;
	fbTask4 : FB_ControllerType_2;
	fbTask5 : FB_ControllerType_1;
	fbTask6 : FB_ControllerType_1;
	
	component1_in : BOOL;
	component1_out : BOOL;
	component2_in : BOOL;
	component2_out : BOOL;
	component3_in : BOOL;
	component3_out : BOOL;
	component4_in : BOOL;
	component4_out : BOOL;
	serial_job1 : FB_BatchJobContainer;
	serial_job2 : FB_BatchJobContainer;
	serial_job2_1 : FB_BatchJobContainer;
	serial_job2_2 : FB_BatchJobContainer;
	serial_job3 : FB_BatchJobContainer;
	pararel_job1 : FB_ParallelJobContainer;
	pararel_job2 : FB_ParallelJobContainer;
	
	queue_job : FB_ParallelQueueJobContainer;
	job_create_switch : ARRAY[1..4] OF BOOL;
	executor: FB_Executor;
	execution_step: STRING;
	resume: BOOL;
	abort: BOOL;
	reset : BOOL;
	task_info : __SYSTEM.VAR_INFO;
	
	fb_adslog_reporter : FB_ADSLOG_reporter;
	
	end_of_manual: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF abort THEN
	executor.abort();
END_IF

// Output job state change to ADS log
executor.job_event_reporter := fb_adslog_reporter;

CASE _state OF
	0:
		// 固有パラメータ設
		fbTask1.own_parameter := T#8S;
		fbTask1.future_name := 'Blink-1';
		fbTask2.own_parameter := T#5S;
		fbTask2.future_name := 'Blink-2';
		fbTask3.own_parameter := 2;
		fbTask3.future_name := 'Button count-1';
		fbTask4.own_parameter := 2;
		fbTask4.future_name := 'Button count-2';

		// 入出力変数の受け渡し
		//fbTask1(own_output := component1_out);
		//fbTask2(own_output := component2_out);
		fbTask1.own_output REF= component1_out;
		fbTask2.own_output REF= component2_out;
		fbTask3(own_input := component3_in, own_output := component3_out);
		fbTask4(own_input := component4_in, own_output := component4_out);
		
		// futureオブジェクトの配置により実行順序を定義
		serial_job1.add_future(fbTask1);
		serial_job1.add_future(fbTask2);
		serial_job1.future_name := 'Batch process 1';

		serial_job2_1.add_future(fbTask3);
		serial_job2_1.add_future(fbTask4);
		serial_job2_1.future_name := 'Batch process 2-1';
		serial_job2.add_future(serial_job2_1);

		serial_job2_2.add_future(fbTask3);
		serial_job2_2.add_future(fbTask4);
		serial_job2_2.future_name := 'Batch process 2-2';
		serial_job2.add_future(serial_job2_2);
		serial_job2.future_name := 'Batch process 2';

		pararel_job1.add_future(serial_job2);
		pararel_job1.add_future(serial_job1);
		pararel_job1.future_name := 'Paralell 1';

		pararel_job2.add_future(fbTask3); // 同時実行でなければ同じFutureオブジェクトを使いまわせる
		pararel_job2.add_future(fbTask4);
		pararel_job2.future_name := 'Paralell 2';
		serial_job3.add_future(pararel_job1);
		serial_job3.add_future(pararel_job2);
		serial_job3.future_name := 'Main sequence';
		executor.future := serial_job3;
		executor.id := 'Fixed job';
		executor.continuous_mode := FALSE;
		_state := 1;
	1:
		// シーケンス制御
		IF (executor.current_state = E_FutureExecutionState.wait_for_process AND executor.ready) OR 
			(executor.current_state = E_FutureExecutionState.abort AND resume) THEN
			executor.start();
		END_IF
		IF executor.execute() AND executor.nErrorID = 0 THEN
			_state := 2;
		END_IF
	2:
		executor.future := queue_job;
		executor.id := 'Queued job';
		executor.continuous_mode := TRUE;
		executor.init();
		_state := 3;
	3:
		// キュー
		IF (executor.current_state = E_FutureExecutionState.wait_for_process AND executor.ready) OR 
			(executor.current_state = E_FutureExecutionState.abort AND resume) THEN
			executor.start();
		END_IF
		
		IF job_create_switch[1] THEN
			queue_job.add_future(fbTask1);
			job_create_switch[1] := FALSE;
		ELSIF job_create_switch[2] THEN
			job_create_switch[2] := FALSE;
			queue_job.add_future(fbTask2);
		ELSIF  job_create_switch[3] THEN
			job_create_switch[3] := FALSE;
			queue_job.add_future(fbTask3);
		ELSIF  job_create_switch[4] THEN
			job_create_switch[4] := FALSE;
			queue_job.add_future(fbTask4);
		END_IF
		IF reset THEN
			executor.quit();
		END_IF
		IF executor.execute() AND executor.nErrorID = 0 THEN
			_state := 4;
		END_IF
	4:
		executor.future := serial_job3;
		executor.init();
		_state := 1;
		
END_CASE

IF reset THEN
	reset := NOT executor.reset();
END_IF

execution_step := executor.active_future_id;
resume := FALSE;
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1869" Count="2" />
      <LineId Id="1959" Count="0" />
      <LineId Id="1872" Count="6" />
      <LineId Id="1960" Count="0" />
      <LineId Id="1879" Count="0" />
      <LineId Id="1961" Count="0" />
      <LineId Id="1880" Count="0" />
      <LineId Id="1962" Count="0" />
      <LineId Id="1881" Count="0" />
      <LineId Id="1963" Count="0" />
      <LineId Id="1882" Count="9" />
      <LineId Id="2064" Count="1" />
      <LineId Id="2074" Count="0" />
      <LineId Id="2057" Count="0" />
      <LineId Id="2055" Count="1" />
      <LineId Id="2077" Count="0" />
      <LineId Id="1896" Count="0" />
      <LineId Id="2058" Count="0" />
      <LineId Id="2060" Count="1" />
      <LineId Id="2079" Count="0" />
      <LineId Id="1897" Count="0" />
      <LineId Id="2076" Count="0" />
      <LineId Id="2062" Count="0" />
      <LineId Id="2053" Count="0" />
      <LineId Id="2069" Count="0" />
      <LineId Id="2082" Count="0" />
      <LineId Id="2072" Count="0" />
      <LineId Id="1902" Count="1" />
      <LineId Id="2083" Count="0" />
      <LineId Id="1904" Count="1" />
      <LineId Id="2084" Count="0" />
      <LineId Id="1906" Count="1" />
      <LineId Id="2004" Count="0" />
      <LineId Id="1908" Count="12" />
      <LineId Id="2002" Count="0" />
      <LineId Id="1921" Count="21" />
      <LineId Id="2123" Count="2" />
      <LineId Id="2006" Count="5" />
      <LineId Id="2005" Count="0" />
      <LineId Id="1943" Count="0" />
      <LineId Id="1951" Count="7" />
      <LineId Id="1744" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>