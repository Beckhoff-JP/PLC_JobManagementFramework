<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="demo3" Id="{0711fc19-ddf5-4c28-b96d-7cde88b1723f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM demo3
VAR
	runner : FB_TaskRunner;
	fbJobTreeSearch : FB_ExecutorTreeSearch;

	init: BOOL;
	_state :UINT;
	mc_power : FutureMCPower;
	_poweron_job	: FB_Executor;
	
	demo_job	: FB_Executor;
	bPower : BOOL;
	bStart : BOOL;
	
	await : BOOL;
	
	fbGetTimeZoneInformation	: FB_GetTimeZoneInformation := (bExecute := TRUE);
	localTime : FB_LocalSystemTime := (bEnable := TRUE);
	tzinfo : FB_GetTimeZoneInformation := (bExecute := TRUE);
	getSystemtime : FB_TzSpecificLocalTimeToSystemTime;
	current_time : T_FILETIME64;
	observer : REFERENCE TO FB_observer;
	
	motion_data : ST_MotionData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT init THEN
	JobCreateDemo(demo_job, GVL.axis1); // demo_job にメソッドを通してシーケンスジョブを組み立てる
	mc_power.future_name := 'POWER_CTRL';
	_poweron_job.future := mc_power;
	observer REF= runner.fbObserver;
	init := TRUE;	// RUN 後 1 サイクルだけ実行
END_IF



// 現在時刻の取得
localTime();
tzinfo();
getSystemtime(in := localTime.systemTime, tzInfo := tzinfo.tzInfo);
current_time := SYSTEMTIME_TO_FILETIME64(getSystemtime.out);
observer(current_time := current_time);

// Axis
GVL.axis1.ReadStatus();
MEMCPY(ADR(motion_data), ADR(GVL.axis1.NcToPlc), SIZEOF(GVL.axis1.NcToPlc));
motion_data.record_time := current_time;

CASE _state OF
	0:
		IF bPower THEN
			mc_power.set_parameters(axis := GVL.axis1, status := TRUE); // Servo on
			IF runner.append_job(_poweron_job) THEN
				_state := 1;			
			END_IF
		END_IF
	1:
		IF _poweron_job.done THEN
			_state := 2;
		END_IF
	2:
		IF bStart THEN
			IF runner.append_job(demo_job) THEN
				_state := 3;
			END_IF
		END_IF
	3:
		IF demo_job.done THEN
			_state := 2;
			//bStart := FALSE;
		END_IF
		IF NOT bPower THEN
			_state := 4;
		END_IF
	4:
		IF NOT demo_job.done THEN
			IF runner.abort(demo_job) THEN
				IF runner.quit(demo_job) THEN
					IF runner.job_clear(demo_job) THEN
						_state := 5;
					END_IF
				END_IF
			END_IF
		END_IF
	5:
		mc_power.set_parameters(axis := GVL.axis1, status := FALSE); // Servo off
		IF runner.append_job(_poweron_job) THEN
			_state := 6;		
		END_IF
	6:
		IF _poweron_job.done THEN
			_state := 0;
		END_IF
END_CASE

//IF _state > 0 AND NOT bPower THEN
//END_IF

runner(root_job_id := '#1', root_job_name := 'ROOT');


]]></ST>
    </Implementation>
    <Method Name="JobCreateDemo" Id="{c6c18e30-8bba-4c6d-806d-02b28dd2a277}">
      <Declaration><![CDATA[METHOD JobCreateDemo : BOOL
VAR_INPUT
	base_job : REFERENCE TO FB_Executor;
	stAxis1	: REFERENCE TO AXIS_REF;
END_VAR
VAR
	_job_temp : REFERENCE TO FB_Executor;
	_job_temp_parent : REFERENCE TO FB_Executor;
	sleep : POINTER TO FutureSleep;
	sleep_creator : FutureSleepCreator;

	//mc_move_rel_future : POINTER TO FutureMCMoveRelative;
	mc_move_rel_future_creator : FutureMCMoveRelativeCreator;

	//mc_move_abs_future : POINTER TO FutureMCMoveAbsolute;
	mc_move_abs_future_creator : FutureMCMoveAbsoluteCreator;

	//mc_move_velocity_future: POINTER TO FutureMCMoveVelocity;
	mc_move_velocity_future_creator: FutureMCMoveVelocityCreator;
	
	mc_stop_future_creator : FutureMcStopCreator;
	
	i : UDINT;

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[base_job.create_container(ContainerTYpe.BATCH, 'DEMO_JOB');
// Sequence
_job_temp_parent REF= base_job.children.create_container(ContainerTYpe.BATCH, 'STEP MOVING');
FOR i := 1 TO 10 DO

	mc_move_rel_future_creator.set_parameters(stAxis1,20,200,0,0,0,0);
	_job_temp REF= _job_temp_parent.children.create_job(mc_move_rel_future_creator,'Move +20 deg, 200 deg/s');

	sleep_creator.sleep_time := T#100MS;
	_job_temp REF= _job_temp_parent.children.create_job(sleep_creator,'Wait 100ms');
	
END_FOR

// position set to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,200,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,'Back to home');

FOR i := 1 TO 10 DO

	mc_move_rel_future_creator.set_parameters(stAxis1,-20,200,0,0,0,0);
	_job_temp REF= base_job.children.create_job(mc_move_rel_future_creator,'Move -20 deg, 200 deg/s');

	sleep_creator.sleep_time := T#100MS;
	_job_temp REF= base_job.children.create_job(sleep_creator,'Wait 100ms');
	
END_FOR

// position to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,200,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,'Back to home');

sleep_creator.sleep_time := T#100MS;
_job_temp REF= base_job.children.create_job(sleep_creator,'Wait 100ms');

// 1000deg/s -> 500deg/s

mc_move_velocity_future_creator.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,10,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_velocity_future_creator,'Move velocity');

sleep_creator.sleep_time := T#5S;
_job_temp REF= base_job.children.create_job(sleep_creator,'10 deg/s 5 seconds');

mc_move_velocity_future_creator.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,250,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_velocity_future_creator,'Move velocity');

sleep_creator.sleep_time := T#3S;
_job_temp REF= base_job.children.create_job(sleep_creator,'250 deg/s 5 seconds');

mc_move_velocity_future_creator.set_parameters(stAxis1,MC_Direction.MC_Positive_Direction,500,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_velocity_future_creator,'Move velocity');

sleep_creator.sleep_time := T#2S;
_job_temp REF= base_job.children.create_job(sleep_creator,'500 deg/s 5 seconds');


mc_stop_future_creator.set_parameters(stAxis1,0,0);
_job_temp REF= base_job.children.create_job(mc_stop_future_creator,'STOP');

// position to 0

mc_move_abs_future_creator.set_parameters(stAxis1,0,1000,0,0,0,0);
_job_temp REF= base_job.children.create_job(mc_move_abs_future_creator,'Back to home');
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>